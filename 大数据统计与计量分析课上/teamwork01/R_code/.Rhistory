#generate  sample size
x = seq(5,8.5,by = 0.1)
y = 2^(x)
plot(x,y)
samp = round(y)
samp
n = length(samp)
set.seed(6)
fun1 = function(i){
p = sample(data_salary,i)
p = c(p,matrix(NA,1,samp[n]-length(p)))
return (p)
}
samp = as.matrix(samp)
ma = apply(samp, 1, fun1)
#calculate the quality of sample
J = NULL
fun2 = function(data) {
data1 = cut(na.omit(data),breaks = c(0,3000000*(1:11),max(data_salary)))
PS = table(data1)/length(na.omit(data)) + 0.00000001 #protect from 0
J = sum((PS-PD) * (log(PS/PD)))
q = exp(-J)
return (q)
}
Q = apply(ma,2,fun2)
plot(samp,Q)
#load original data
salary_data = read.csv("D:\\桌面\\player_salary_analysis\\data_source\\NBA_season1718_salary.csv",
fileEncoding = "UTF-8",stringsAsFactors = F)
stats_data = read.csv("D:\\桌面\\player_salary_analysis\\data_source\\Seasons_Stats.csv",
fileEncoding = "UTF-8",stringsAsFactors = F)
#delete some variable
#salary_data delete x1 and Tm
#stats_data select year 2016.0 and delete some null cols,rows and meanlessing cols
stats_data = stats_data[,-1]
stats_data = stats_data[,-which(apply(stats_data,2,function(x) (is.na(x[1]))))]
stats_data = stats_data[-which(apply(stats_data,1,function(x) (is.na(x[1])))),]
class(stats_data)
stats_data = stats_data[stats_data$Year == 2016,]
stats_data = stats_data[,c(-1,-5)]
#head(stats_data)
salary_data = salary_data[,c(-1,-3)]
names(salary_data) = c("Player","salary")
#head(salary_data)
#combine two datasets
total_data = merge(salary_data,stats_data,by="Player")
#delete variable"name"
total_data = total_data[,-1]
total_data = na.omit(total_data)
head(total_data)
summary(total_data)
str(total_data)
#use Simple random sampling  to select the optimal sample size (threshold:0.99)
nr = nrow(total_data)
nl = length(total_data)
data_salary = total_data[,'salary']
N = length(data_salary)
#Partition interval
data_sala1 = cut(data_salary,breaks = c(0,3000000*(1:11),max(data_salary)))
data_sala1
PD = table(data_sala1) / N
#generate  sample size
x = seq(5,8.5,by = 0.1)
y = 2^(x)
#plot(x,y)
samp = round(y)
#samp
n = length(samp)
set.seed(6)
fun1 = function(i){
p = sample(data_salary,i)
p = c(p,matrix(NA,1,samp[n]-length(p)))
return (p)
}
samp = as.matrix(samp)
ma = apply(samp, 1, fun1)
#calculate the quality of sample
J = NULL
fun2 = function(data) {
data1 = cut(na.omit(data),breaks = c(0,3000000*(1:11),max(data_salary)))
PS = table(data1)/length(na.omit(data)) + 0.00000001 #protect from 0
J = sum((PS-PD) * (log(PS/PD)))
q = exp(-J)
return (q)
}
Q = apply(ma,2,fun2)
plot(samp,Q)
print(Q)
print(Q[Q > 0.99])
print(samp[Q > 0.99])
#select the best number of sample
samp[Q > 0.99][0]
#select the best number of sample
samp[Q > 0.99][1]
ma
b = ma[Q > 0.99][1]
b
b = ma[Q > 0.99,][1]
b
#load original data
salary_data = read.csv("D:\\桌面\\player_salary_analysis\\data_source\\NBA_season1718_salary.csv",
fileEncoding = "UTF-8",stringsAsFactors = F)
stats_data = read.csv("D:\\桌面\\player_salary_analysis\\data_source\\Seasons_Stats.csv",
fileEncoding = "UTF-8",stringsAsFactors = F)
#delete some variable
#salary_data delete x1 and Tm
#stats_data select year 2016.0 and delete some null cols,rows and meanlessing cols
stats_data = stats_data[,-1]
stats_data = stats_data[,-which(apply(stats_data,2,function(x) (is.na(x[1]))))]
stats_data = stats_data[-which(apply(stats_data,1,function(x) (is.na(x[1])))),]
class(stats_data)
stats_data = stats_data[stats_data$Year == 2016,]
stats_data = stats_data[,c(-1,-5)]
#head(stats_data)
salary_data = salary_data[,c(-1,-3)]
names(salary_data) = c("Player","salary")
#head(salary_data)
#combine two datasets
total_data = merge(salary_data,stats_data,by="Player")
#delete variable"name"
total_data = total_data[,-1]
total_data = na.omit(total_data)
head(total_data)
summary(total_data)
str(total_data)
#use Simple random sampling  to select the optimal sample size (threshold:0.99)
nr = nrow(total_data)
nl = length(total_data)
data_salary = total_data[,'salary']
N = length(data_salary)
#Partition interval
data_sala1 = cut(data_salary,breaks = c(0,3000000*(1:11),max(data_salary)))
data_sala1
PD = table(data_sala1) / N
#generate  sample size
x = seq(5,8.5,by = 0.1)
y = 2^(x)
#plot(x,y)
samp = round(y)
#samp
n = length(samp)
set.seed(6)
fun1 = function(i){
p = sample(data_salary,i)
p = c(p,matrix(NA,1,samp[n]-length(p)))
return (p)
}
samp = as.matrix(samp)
ma = apply(samp, 1, fun1)
#calculate the quality of sample
J = NULL
fun2 = function(data) {
data1 = cut(na.omit(data),breaks = c(0,3000000*(1:11),max(data_salary)))
PS = table(data1)/length(na.omit(data)) + 0.00000001 #protect from 0
J = sum((PS-PD) * (log(PS/PD)))
q = exp(-J)
return (q)
}
Q = apply(ma,2,fun2)
plot(samp,Q)
#select the best number of sample
best_samp = samp[Q > 0.99][1]
b = ma[,Q > 0.99][1]
b
b = ma[,Q > 0.99]
b
#load original data
salary_data = read.csv("D:\\桌面\\player_salary_analysis\\data_source\\NBA_season1718_salary.csv",
fileEncoding = "UTF-8",stringsAsFactors = F)
stats_data = read.csv("D:\\桌面\\player_salary_analysis\\data_source\\Seasons_Stats.csv",
fileEncoding = "UTF-8",stringsAsFactors = F)
#delete some variable
#salary_data delete x1 and Tm
#stats_data select year 2016.0 and delete some null cols,rows and meanlessing cols
stats_data = stats_data[,-1]
stats_data = stats_data[,-which(apply(stats_data,2,function(x) (is.na(x[1]))))]
stats_data = stats_data[-which(apply(stats_data,1,function(x) (is.na(x[1])))),]
class(stats_data)
stats_data = stats_data[stats_data$Year == 2016,]
stats_data = stats_data[,c(-1,-5)]
#head(stats_data)
salary_data = salary_data[,c(-1,-3)]
names(salary_data) = c("Player","salary")
#head(salary_data)
#combine two datasets
total_data = merge(salary_data,stats_data,by="Player")
#delete variable"name"
total_data = total_data[,-1]
total_data = na.omit(total_data)
head(total_data)
summary(total_data)
str(total_data)
#use Simple random sampling  to select the optimal sample size (threshold:0.99)
nr = nrow(total_data)
nl = length(total_data)
data_salary = total_data[,'salary']
N = length(data_salary)
#Partition interval
data_sala1 = cut(data_salary,breaks = c(0,3000000*(1:11),max(data_salary)))
data_sala1
PD = table(data_sala1) / N
#generate  sample size
x = seq(5,8.5,by = 0.1)
y = 2^(x)
#plot(x,y)
samp = round(y)
#samp
n = length(samp)
set.seed(6)
fun1 = function(i){
p = sample(data_salary,i)
p = c(p,matrix(NA,1,samp[n]-length(p)))
return (p)
}
samp = as.matrix(samp)
ma = apply(samp, 1, fun1)
#calculate the quality of sample
J = NULL
fun2 = function(data) {
data1 = cut(na.omit(data),breaks = c(0,3000000*(1:11),max(data_salary)))
PS = table(data1)/length(na.omit(data)) + 0.00000001 #protect from 0
J = sum((PS-PD) * (log(PS/PD)))
q = exp(-J)
return (q)
}
Q = apply(ma,2,fun2)
plot(samp,Q)
#select the best number of sample
best_samp = samp[Q > 0.99][1]
b = ma[,Q > 0.99][,1]
b
#load original data
salary_data = read.csv("D:\\桌面\\player_salary_analysis\\data_source\\NBA_season1718_salary.csv",
fileEncoding = "UTF-8",stringsAsFactors = F)
stats_data = read.csv("D:\\桌面\\player_salary_analysis\\data_source\\Seasons_Stats.csv",
fileEncoding = "UTF-8",stringsAsFactors = F)
#delete some variable
#salary_data delete x1 and Tm
#stats_data select year 2016.0 and delete some null cols,rows and meanlessing cols
stats_data = stats_data[,-1]
stats_data = stats_data[,-which(apply(stats_data,2,function(x) (is.na(x[1]))))]
stats_data = stats_data[-which(apply(stats_data,1,function(x) (is.na(x[1])))),]
class(stats_data)
stats_data = stats_data[stats_data$Year == 2016,]
stats_data = stats_data[,c(-1,-5)]
#head(stats_data)
salary_data = salary_data[,c(-1,-3)]
names(salary_data) = c("Player","salary")
#head(salary_data)
#combine two datasets
total_data = merge(salary_data,stats_data,by="Player")
#delete variable"name"
total_data = total_data[,-1]
total_data = na.omit(total_data)
head(total_data)
summary(total_data)
str(total_data)
#use Simple random sampling  to select the optimal sample size (threshold:0.99)
nr = nrow(total_data)
nl = length(total_data)
data_salary = total_data[,'salary']
N = length(data_salary)
#Partition interval
data_sala1 = cut(data_salary,breaks = c(0,3000000*(1:11),max(data_salary)))
data_sala1
PD = table(data_sala1) / N
#generate  sample size
x = seq(5,8.5,by = 0.1)
y = 2^(x)
#plot(x,y)
samp = round(y)
#samp
n = length(samp)
set.seed(6)
fun1 = function(i){
p = sample(data_salary,i)
p = c(p,matrix(NA,1,samp[n]-length(p)))
return (p)
}
samp = as.matrix(samp)
ma = apply(samp, 1, fun1)
#calculate the quality of sample
J = NULL
fun2 = function(data) {
data1 = cut(na.omit(data),breaks = c(0,3000000*(1:11),max(data_salary)))
PS = table(data1)/length(na.omit(data)) + 0.00000001 #protect from 0
J = sum((PS-PD) * (log(PS/PD)))
q = exp(-J)
return (q)
}
Q = apply(ma,2,fun2)
plot(samp,Q)
#select the best number of sample
best_samp = samp[Q > 0.99][1]
best_samp
b = ma[,Q > 0.99][,1]
b
#load original data
salary_data = read.csv("D:\\桌面\\player_salary_analysis\\data_source\\NBA_season1718_salary.csv",
fileEncoding = "UTF-8",stringsAsFactors = F)
stats_data = read.csv("D:\\桌面\\player_salary_analysis\\data_source\\Seasons_Stats.csv",
fileEncoding = "UTF-8",stringsAsFactors = F)
#delete some variable
#salary_data delete x1 and Tm
#stats_data select year 2016.0 and delete some null cols,rows and meanlessing cols
stats_data = stats_data[,-1]
stats_data = stats_data[,-which(apply(stats_data,2,function(x) (is.na(x[1]))))]
stats_data = stats_data[-which(apply(stats_data,1,function(x) (is.na(x[1])))),]
class(stats_data)
stats_data = stats_data[stats_data$Year == 2016,]
stats_data = stats_data[,c(-1,-5)]
#head(stats_data)
salary_data = salary_data[,c(-1,-3)]
names(salary_data) = c("Player","salary")
#head(salary_data)
#combine two datasets
total_data = merge(salary_data,stats_data,by="Player")
#delete variable"name"
total_data = total_data[,-1]
total_data = na.omit(total_data)
head(total_data)
summary(total_data)
str(total_data)
#use Simple random sampling  to select the optimal sample size (threshold:0.99)
nr = nrow(total_data)
nl = length(total_data)
data_salary = total_data[,'salary']
N = length(data_salary)
#Partition interval
data_sala1 = cut(data_salary,breaks = c(0,3000000*(1:11),max(data_salary)))
data_sala1
PD = table(data_sala1) / N
#generate  sample size
x = seq(5,8.5,by = 0.1)
y = 2^(x)
#plot(x,y)
samp = round(y)
#samp
n = length(samp)
set.seed(6)
fun1 = function(i){
p = sample(data_salary,i)
p = c(p,matrix(NA,1,samp[n]-length(p)))
return (p)
}
samp = as.matrix(samp)
ma = apply(samp, 1, fun1)
#calculate the quality of sample
J = NULL
fun2 = function(data) {
data1 = cut(na.omit(data),breaks = c(0,3000000*(1:11),max(data_salary)))
PS = table(data1)/length(na.omit(data)) + 0.00000001 #protect from 0
J = sum((PS-PD) * (log(PS/PD)))
q = exp(-J)
return (q)
}
Q = apply(ma,2,fun2)
plot(samp,Q)
#select the best number of sample
best_number = samp[Q > 0.99][1]
best_sample = ma[,Q > 0.99][,1]
install.packages("LightGBM")
install.packages("lightgbm")
library(lightgbm)
ori_data = read.csv("uscecchini28.csv",
fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
library(lightgbm)
ori_data = read.csv(r"\uscecchini28.csv",
fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
library(lightgbm)
ori_data = read.csv(r"\uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
ori_data = read.csv(r"/uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
library(lightgbm)
ori_data = read.csv("uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
library(lightgbm)
ori_data = read.csv(".uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
library(lightgbm)
ori_data = read.csv("\uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
ori_data = read.csv("\\uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
ori_data = read.csv("uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
library(lightgbm)
ori_data = read.csv("uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
library(lightgbm)
ori_data = read.csv("/uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
library(lightgbm)
ori_data = read.csv("D:\桌面\data_analysis\teamwork01\R_code\uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
library(lightgbm)
ori_data = read.csv(r"D:\桌面\data_analysis\teamwork01\R_code\uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
library(lightgbm)
ori_data = read.csv("D:\\桌面\\data_analysis\\teamwork01\\R_code\\uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
library(lightgbm)
ori_data = read.csv("uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
library(lightgbm)
ori_data = read.csv("uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
head(ori_data)
library(lightgbm)
ori_data = read.csv("uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
print(1)
head(ori_data)
library(lightgbm)
ori_data = read.csv(".\uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
print(1)
#head(ori_data)
library(lightgbm)
ori_data = read.csv("./uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
print(1)
#head(ori_data)
library(lightgbm)
ori_data = read.csv("/uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
print(1)
#head(ori_data)
library(lightgbm)
ori_data = read.csv("/Rcode/uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
print(1)
#head(ori_data)
library(lightgbm)
ori_data = read.csv("/Rcode/uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
print(1)
#head(ori_data)
library(lightgbm)
ori_data = read.csv("/R_code/uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
print(1)
#head(ori_data)
library(lightgbm)
ori_data = read.csv("/R_code/uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
print(1)
#head(ori_data)
library(lightgbm)
ori_data = read.csv("/R_code/uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
print(1)
#head(ori_data)
library(lightgbm)
ori_data = read.csv("D:/桌面/data_analysis/teamwork01/R_code/uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
print(1)
#head(ori_data)
library(lightgbm)
ori_data = read.csv("./uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
print(1)
#head(ori_data)
library(lightgbm)
ori_data = read.csv("D:/桌面/data_analysis/teamwork01/R_code/uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
print(1)
#head(ori_data)
head(ori_data)
library(lightgbm)
library(ROCR)
setwd("D:/桌面/data_analysis/teamwork01/R_code/")
ori_data <- read.csv("D:/桌面/data_analysis/teamwork01/R_code/uscecchini28.csv", fileEncoding = "UTF-8",stringsAsFactors = F)
#head(ori_data)
gap <- 2   #the gap between training and testing periods, 2-year gap by default
set.seed(6)
for (test_year in 2003:2003) {
#train data
data_train <- ori_data[ori_data[,1] >= 1991 & ori_data[,1] <= test_year - gap,]
y_train <- data_train[,9]
X_train <- as.matrix(data_train[,10:37])
#head(X_train)
newpaaer_train <- data_train[,8]
#test data
data_test <- ori_data[ori_data[,1] == test_year,]
y_test <- data_test[,9]
X_test <- as.matrix(data_test[,10:37])
newpapper_test <- unique(data_test[data_test[,9] != 0,8])
#head(newpapper_test)
num_frauds <- sum(y_train == 1)
y_train[newpaaer_train%in%newpapper_test] <- 0
num_frauds <- num_frauds - sum(y_train==1)
print(paste("num_frauds:",num_frauds))
classiftime1 <- proc.time()  # record classification time
#train model
dtrain <- lgb.Dataset(X_train,label =(y_train))
dtest <- lgb.Dataset.create.valid(dtrain,data = X_test,label = (y_test)  )
valids <- list(eval = dtest, train = dtrain)
param <- list(
'metric' = 'auc'
,num_leaves = 10L
, learning_rate = 0.01
, objective = "binary"
)
bst <- lgb.train(param, dtrain, nrounds = 500L, valids = valids)
t = proc.time() - classiftime1
print("train_time:")
print(t)
classiftime1 <- proc.time()  # record classification time
ptrain <- predict(bst, X_train)
ptest  <- predict(bst, X_test)
t = proc.time() - classiftime1
print("test_time:")
print((t))
tree_imp <- lgb.importance(bst, percentage = TRUE)
lgb.plot.importance(tree_imp, top_n = 10L, measure = "Gain")
pred = prediction(ptest,y_test)
perf = performance(pred,"tpr","fpr")
auc = performance(pred,"auc")
auc = unlist(slot(auc,"y.values"))
#picname = paste("roc_",test_year,".png")
#png(file=picname, bg="white")
plot(perf,xlim = c(0,1),ylim = c(0,1),col="red",main = paste("test_year",test_year," ROC curve (","AUC:",auc,")"),lwd = 2)
#dev.off()
}
